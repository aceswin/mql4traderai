{"ast":null,"code":"var _jsxFileName = \"c:\\\\Users\\\\JORDAN\\\\Desktop\\\\mql4traderai\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [messages, setMessages] = useState([{\n    role: 'system',\n    content: `You are an MQL4 coding expert. The user will describe a trading strategy in plain English, and your job is to output clean MQL4 Expert Advisor (.mq4) code that matches the strategy.\n\nInclude:\n- OnInit(), OnDeinit(), and OnTick()\n- Risk management\n- Comments in the code\n- Provide a short explanation first, then output the raw code only — no markdown formatting.`\n  }]);\n  const [userInput, setUserInput] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [code, setCode] = useState('');\n  const [error, setError] = useState('');\n  const [aiResponse, setAiResponse] = useState('');\n  const sendMessage = async (customInput = null) => {\n    const input = customInput !== null ? customInput : userInput;\n    if (!input.trim()) return;\n    setLoading(true);\n    setError('');\n    setAiResponse('');\n    setCode('');\n    const updatedMessages = [...messages, {\n      role: 'user',\n      content: input\n    }];\n    setMessages(updatedMessages);\n    setUserInput('');\n    try {\n      const res = await fetch('http://localhost:4000/api/generate-ea', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          messages: updatedMessages\n        })\n      });\n      const data = await res.json();\n      if (data.error) {\n        setError(data.error);\n      } else {\n        const assistantMsg = {\n          role: 'assistant',\n          content: data.eaCode\n        };\n        setMessages([...updatedMessages, assistantMsg]);\n        const splitContent = data.eaCode.split(/(\\/\\/\\+.*MyEA\\.mq4.*\\n)/);\n        if (splitContent.length > 1) {\n          setAiResponse(splitContent[0].trim());\n          setCode(splitContent.slice(1).join('').trim());\n        } else {\n          setAiResponse(\"Here's your Expert Advisor code. Test it out and let me know if anything goes wrong.\");\n          setCode(data.eaCode);\n        }\n      }\n    } catch (err) {\n      setError('Something went wrong.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const resetSession = () => {\n    setMessages([{\n      role: 'system',\n      content: `You are an MQL4 coding expert. The user will describe a trading strategy in plain English, and your job is to output clean MQL4 Expert Advisor (.mq4) code that matches the strategy.\n\nInclude:\n- OnInit(), OnDeinit(), and OnTick()\n- Risk management\n- Comments in the code\n- Provide a short explanation first, then output the raw code only — no markdown formatting.`\n    }]);\n    setUserInput('');\n    setCode('');\n    setError('');\n    setAiResponse('');\n  };\n  const downloadCode = () => {\n    if (!code) return;\n    const blob = new Blob([code], {\n      type: 'text/plain'\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = 'MyExpertAdvisor.mq4';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      background: '#fff',\n      padding: 20,\n      fontFamily: 'Arial, sans-serif'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"MQL4 EA Builder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: userInput,\n      onChange: e => setUserInput(e.target.value),\n      rows: 4,\n      placeholder: \"Describe your EA strategy...\",\n      style: {\n        width: '100%',\n        padding: 10\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: 10\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => sendMessage(),\n        disabled: loading,\n        children: loading ? 'Thinking...' : 'Generate Code'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetSession,\n        style: {\n          marginLeft: 10\n        },\n        children: \"Reset Session\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: downloadCode,\n        style: {\n          marginLeft: 10\n        },\n        disabled: !code,\n        children: \"Download MQ4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'red',\n        marginTop: 20\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 17\n    }, this), aiResponse && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: 20,\n        padding: 10,\n        background: '#f0f0f0'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"AI says:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: aiResponse\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }, this), code && /*#__PURE__*/_jsxDEV(\"pre\", {\n      style: {\n        marginTop: 20,\n        padding: 15,\n        background: '#f5f5f5',\n        color: '#000',\n        whiteSpace: 'pre-wrap'\n      },\n      children: code\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"lBJNAQqZWgm0cPHCrF4VP49xEgo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","messages","setMessages","role","content","userInput","setUserInput","loading","setLoading","code","setCode","error","setError","aiResponse","setAiResponse","sendMessage","customInput","input","trim","updatedMessages","res","fetch","method","headers","body","JSON","stringify","data","json","assistantMsg","eaCode","splitContent","split","length","slice","join","err","resetSession","downloadCode","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","download","appendChild","click","removeChild","style","background","padding","fontFamily","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","rows","placeholder","width","marginTop","onClick","disabled","marginLeft","color","whiteSpace","_c","$RefreshReg$"],"sources":["c:/Users/JORDAN/Desktop/mql4traderai/frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\n\nfunction App() {\n  const [messages, setMessages] = useState([\n    {\n      role: 'system',\n      content: `You are an MQL4 coding expert. The user will describe a trading strategy in plain English, and your job is to output clean MQL4 Expert Advisor (.mq4) code that matches the strategy.\n\nInclude:\n- OnInit(), OnDeinit(), and OnTick()\n- Risk management\n- Comments in the code\n- Provide a short explanation first, then output the raw code only — no markdown formatting.`\n    }\n  ]);\n\n  const [userInput, setUserInput] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [code, setCode] = useState('');\n  const [error, setError] = useState('');\n  const [aiResponse, setAiResponse] = useState('');\n\n  const sendMessage = async (customInput = null) => {\n    const input = customInput !== null ? customInput : userInput;\n    if (!input.trim()) return;\n    setLoading(true);\n    setError('');\n    setAiResponse('');\n    setCode('');\n\n    const updatedMessages = [...messages, { role: 'user', content: input }];\n    setMessages(updatedMessages);\n    setUserInput('');\n\n    try {\n      const res = await fetch('http://localhost:4000/api/generate-ea', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ messages: updatedMessages })\n      });\n\n      const data = await res.json();\n\n      if (data.error) {\n        setError(data.error);\n      } else {\n        const assistantMsg = { role: 'assistant', content: data.eaCode };\n        setMessages([...updatedMessages, assistantMsg]);\n\n        const splitContent = data.eaCode.split(/(\\/\\/\\+.*MyEA\\.mq4.*\\n)/);\n        if (splitContent.length > 1) {\n          setAiResponse(splitContent[0].trim());\n          setCode(splitContent.slice(1).join('').trim());\n        } else {\n          setAiResponse(\"Here's your Expert Advisor code. Test it out and let me know if anything goes wrong.\");\n          setCode(data.eaCode);\n        }\n      }\n    } catch (err) {\n      setError('Something went wrong.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const resetSession = () => {\n    setMessages([\n      {\n        role: 'system',\n        content: `You are an MQL4 coding expert. The user will describe a trading strategy in plain English, and your job is to output clean MQL4 Expert Advisor (.mq4) code that matches the strategy.\n\nInclude:\n- OnInit(), OnDeinit(), and OnTick()\n- Risk management\n- Comments in the code\n- Provide a short explanation first, then output the raw code only — no markdown formatting.`\n      }\n    ]);\n    setUserInput('');\n    setCode('');\n    setError('');\n    setAiResponse('');\n  };\n\n  const downloadCode = () => {\n    if (!code) return;\n    const blob = new Blob([code], { type: 'text/plain' });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = 'MyExpertAdvisor.mq4';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  return (\n    <div style={{ background: '#fff', padding: 20, fontFamily: 'Arial, sans-serif' }}>\n      <h1>MQL4 EA Builder</h1>\n\n      <textarea\n        value={userInput}\n        onChange={(e) => setUserInput(e.target.value)}\n        rows={4}\n        placeholder=\"Describe your EA strategy...\"\n        style={{ width: '100%', padding: 10 }}\n      ></textarea>\n\n      <div style={{ marginTop: 10 }}>\n        <button onClick={() => sendMessage()} disabled={loading}>\n          {loading ? 'Thinking...' : 'Generate Code'}\n        </button>\n        <button onClick={resetSession} style={{ marginLeft: 10 }}>\n          Reset Session\n        </button>\n        <button onClick={downloadCode} style={{ marginLeft: 10 }} disabled={!code}>\n          Download MQ4\n        </button>\n      </div>\n\n      {error && <div style={{ color: 'red', marginTop: 20 }}>{error}</div>}\n\n      {aiResponse && (\n        <div style={{ marginTop: 20, padding: 10, background: '#f0f0f0' }}>\n          <strong>AI says:</strong>\n          <p>{aiResponse}</p>\n        </div>\n      )}\n\n      {code && (\n        <pre style={{ marginTop: 20, padding: 15, background: '#f5f5f5', color: '#000', whiteSpace: 'pre-wrap' }}>\n          {code}\n        </pre>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}